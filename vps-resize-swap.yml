---
# Resize swapfile for VPS
# Steps:
# 1. Stop PBRun
# 2. Stop all running pb6 and pb7 bots
# 3. Delete existing swapfile if it exists
# 4. Create new swapfile
# 5. Set swappiness and vfs_cache_pressure
# 6. Start PBRun

- hosts: "{{ hostname }}"
  gather_facts: yes

  vars:
    # ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
    ansible_ssh_pass: "{{ user_pw }}"
    ansible_become_password: "{{ user_pw }}"
    user: "{{ user }}"
    user_pw: "{{ user_pw }}"
    swap_size: "{{ swap_size }}"

  tasks:
    - name: display facts
      debug:
        var: ansible_facts
      tags: debug,never

    - name: get remote_home and install_dir
      set_fact:
        remote_home: "{{ ansible_env.HOME }}"
        install_dir: "{{ ansible_env.HOME + '/software' }}"
    
    - name: print install_dir
      debug:
        var: install_dir
      tags: debug,never

    - name: check if swapfile exists
      stat:
        path: /swapfile
      register: swapfile_status

    - name: print swapfile status
      debug:
        var: swapfile_status.stat.exists
      tags: debug,never

    - name: delete swapfile if it exists and recreate it
      block:
        - name: Make sure PBRun is stopped
          shell: |
            source "{{ install_dir }}/venv_pbgui/bin/activate"
            python "{{ install_dir }}/pbgui/starter.py" -k PBRun
          args:
            executable: /bin/bash
            chdir: "{{ install_dir }}/pbgui"

        - name: kill all pb6 processes
          shell: "kill $(ps -ef | grep {{ install_dir }}/pb6/passivbot | grep -v grep | awk '{print $2}')"
          ignore_errors: yes

        - name: kill all pb7 processes
          shell: "kill $(ps -ef | grep {{ install_dir }}/pb7/src/main.py | grep -v grep | awk '{print $2}')"
          ignore_errors: yes

        - name: Disable swapfile
          command: swapoff /swapfile
          ignore_errors: yes
        
        - name: Remove swapfile entry from fstab
          mount:
            name: /swapfile
            state: absent
          ignore_errors: yes
        
        - name: Remove swapfile
          file:
            path: /swapfile
            state: absent
      become: yes
      when: swapfile_status.stat.exists == true

    - name: check if swapfile exists
      stat:
        path: /swapfile
      register: swapfile_status

    - name: print swapfile status
      debug:
        var: swapfile_status.stat.exists
      tags: debug,never

    - name: create swapfile block
      block:
        - name: create swapfile if it does not exist
          command: fallocate -l {{ swap_size }} /swapfile
        
        - name: Set permissions on swapfile
          command: chmod 600 /swapfile

        - name: Make swapfile
          command: mkswap /swapfile
        
        - name: Enable swapfile
          command: swapon /swapfile
        
        - name: Add swapfile to fstab
          mount:
            name: /swapfile
            src: /swapfile
            fstype: swap
            opts: sw
            state: present
        
        - name: swappiness
          sysctl:
            name: vm.swappiness
            value: 10
            state: present
        
        - name: vfs_cache_pressure
          sysctl:
            name: vm.vfs_cache_pressure
            value: 50
            state: present
      become: yes
      when: swapfile_status.stat.exists == false
      
    - name: Make sure PBRun ist running
      shell: |
        source "{{ install_dir }}/venv_pbgui/bin/activate"
        python "{{ install_dir }}/pbgui/starter.py" -s PBRun
      args:
        executable: /bin/bash
        chdir: "{{ install_dir }}/pbgui"
